name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  # Quick validation job that runs first
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Python syntax
      run: |
        python -m py_compile $(find . -name "*.py" -not -path "./.*")

  # Lint and code quality checks
  lint:
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python Environment
      uses: ./.github/actions/setup-python-env
      with:
        python-version: '3.11'
        install-dev-deps: 'true'
    
    - name: Check code formatting with Black
      run: black --check --diff src/ tests/
    
    - name: Check import sorting with isort
      run: isort --check-only --diff src/ tests/
    
    - name: Lint with flake8
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Lint with Pylint
      run: pylint src/ --score=no --reports=no
      continue-on-error: true
    
    - name: Type check with MyPy
      run: mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python Environment
      uses: ./.github/actions/setup-python-env
      with:
        python-version: '3.11'
        install-dev-deps: 'true'
    
    - name: Security scan with Bandit
      run: bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
    
    - name: Security scan with Safety
      run: safety check --json --output safety-report.json || true
    
    - name: Upload Safety report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-report
        path: safety-report.json

  # Matrix testing across multiple OS and Python versions
  test:
    runs-on: ${{ matrix.os }}
    needs: [lint, security]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: macos-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.8"
        include:
          # Add specific test configurations
          - os: ubuntu-latest
            python-version: "3.11"
            coverage: true

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python Environment
      uses: ./.github/actions/setup-python-env
      with:
        python-version: ${{ matrix.python-version }}
        install-dev-deps: 'true'
    
    - name: Run unit tests
      run: |
        if [ "${{ matrix.coverage }}" == "true" ]; then
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --junitxml=pytest-results.xml
        else
          pytest tests/ -v --junitxml=pytest-results.xml
        fi
      shell: bash
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: pytest-results.xml
    
    - name: Upload coverage reports to Codecov
      if: matrix.coverage == true && success()
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage HTML report
      if: matrix.coverage == true
      uses: actions/upload-artifact@v3
      with:
        name: coverage-html-report
        path: htmlcov/

  # Integration tests (if they exist)
  integration-test:
    runs-on: ubuntu-latest
    needs: [lint, security]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python Environment
      uses: ./.github/actions/setup-python-env
      with:
        python-version: '3.11'
        install-dev-deps: 'true'
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      run: |
        if [ -d "tests/integration" ]; then
          pytest tests/integration/ -v --junitxml=integration-results.xml
        else
          echo "No integration tests found, skipping"
        fi
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: integration-results.xml

  # Docker testing
  docker-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and test Docker image
      run: |
        if [ -f Dockerfile ]; then
          docker build -t omni-dev-agent:test .
          docker run --rm omni-dev-agent:test python -c "import sys; print(sys.version)"
          docker run --rm omni-dev-agent:test python -m pytest tests/ || echo "Tests failed in Docker"
        else
          echo "No Dockerfile found, skipping Docker test"
        fi

  # Performance benchmarks (if applicable)
  benchmark:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python Environment
      uses: ./.github/actions/setup-python-env
      with:
        python-version: '3.11'
        install-dev-deps: 'true'
    
    - name: Install benchmark dependencies
      run: pip install pytest-benchmark
    
    - name: Run benchmarks
      run: |
        if [ -d "tests/benchmarks" ]; then
          pytest tests/benchmarks/ --benchmark-json=benchmark-results.json
        else
          echo "No benchmark tests found, skipping"
        fi
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: benchmark-results.json
